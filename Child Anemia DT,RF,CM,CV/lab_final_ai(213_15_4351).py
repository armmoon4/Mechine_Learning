# -*- coding: utf-8 -*-
"""Lab_Final_AI(213-15-4351).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vwQ-wDPlWWfLrUNNuK2J5Q_ezRGfPU0u
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.tree import DecisionTreeClassifier

path = r"/content/drive/MyDrive/4. children anemia.csv"
dataset = pd.read_csv(path)

dataset.head()

dataset.tail()

dataset.shape

dataset.info()

dataset.describe()

#data cleaning
dataset.isnull().sum()

dataset.drop(columns=['Anemia level.1'],inplace=True)

sns.heatmap(dataset.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

sns.pairplot(dataset)
plt.show()

plt.figure(figsize=(25,25))
sns.heatmap(dataset.isnull())

dataset.dropna(subset=['Anemia level','When child put to breast','Had fever in last two weeks','Taking iron pills, sprinkles or syrup'],inplace=True)
dataset['Currently residing with husband/partner']=dataset['Currently residing with husband/partner'].fillna(dataset['Currently residing with husband/partner'].median)

dataset['Hemoglobin level adjusted for altitude (g/dl - 1 decimal)']=dataset['Hemoglobin level adjusted for altitude (g/dl - 1 decimal)'].fillna(
    dataset['Hemoglobin level adjusted for altitude (g/dl - 1 decimal)'].mean)
dataset['Age in 5-year groups']=dataset['Age in 5-year groups'].apply(lambda x: sum(map(int,x.split('-')))/2)
dataset.info()

dataset.head().reset_index(drop=True)

dataset.drop(columns='When child put to breast',inplace=True)

df = dataset[dataset['Currently residing with husband/partner'].isin(['Living with her', 'Staying elsewhere'])]

df['Hemoglobin level adjusted for altitude (g/dl - 1 decimal)'] = df['Hemoglobin level adjusted for altitude (g/dl - 1 decimal)'].astype(str)


encoder=LabelEncoder()

catcolumns=df.select_dtypes(include=['object']).columns.tolist()
intcol=df.select_dtypes(include=['int64','float64']).columns.tolist()

for i in catcolumns:
    df[i]=encoder.fit_transform(df[i])

count=0
fig, ax=plt.subplots(4,4,figsize=(20,20))
ax=ax.flatten()
for i in df.columns:
    sns.countplot(df,x=i,ax=ax[count])
    count+=1
plt.tight_layout()

plt.figure(figsize=(30,20))
sns.heatmap(df.corr(),annot=True)

"""Decision Tree"""

model=DecisionTreeClassifier()

scaler=StandardScaler()

X=df.drop(columns=['Anemia level'])
y=df['Anemia level']

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=3)
x_train[intcol]=scaler.fit_transform(x_train[intcol])
x_test[intcol]=scaler.transform(x_test[intcol])

model.fit(x_train,y_train)
prediction=model.predict(x_test)

print(f1_score(y_test,prediction,average='micro'))

"""Random Forest"""

from sklearn.model_selection import cross_val_predict
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import accuracy_score, classification_report

classifier = RandomForestClassifier()
num_splits = 5
kf = KFold(n_splits=num_splits, shuffle=True, random_state=2)

X = df.drop('Anemia level', axis=1)
y = df['Anemia level']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=4)

rf_classifier.fit(X_train, y_train)

y_pred = rf_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

"""Cross Validation"""

from sklearn.model_selection import cross_val_score, StratifiedKFold

cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

accuracy_scores = cross_val_score(rf_classifier, X, y, cv=cv, scoring='accuracy')

print(f'Accuracy Scores: {accuracy_scores}')

"""Confusion Matrix"""

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,prediction)

from sklearn.utils.multiclass import unique_labels

unique_labels(y_test)

y_true = [1, 0, 1, 2, 1, 0, 1, 2, 2, 0]
y_pred = [1, 0, 1, 2, 1, 0, 1, 1, 2, 0]

cm = confusion_matrix(y_true, y_pred)

def plot_confusion_matrix(y_true, y_pred):
    labels = unique_labels(y_true)
    columns = [f'Predicted {label}' for label in labels]
    index = [f'Actual {label}' for label in labels]
    table = pd.DataFrame(confusion_matrix(y_true, y_pred),
                         columns=columns, index=index)
    return sns.heatmap(table, annot=True, fmt='d', cmap='viridis')

plot_confusion_matrix(y_test,prediction);

"""Classification Report"""

from sklearn.metrics import classification_report

y_pred = rf_classifier.predict(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))